trigger:
  branches:
    include:
      - main
  paths:
    exclude:
    - k8s/*
pr: none

pool: $(Agente)

variables:
  - group: 'Telegrambot'
  - name: imageName
    value: 'henda24/telegrambot'
  - name: imageTag
    value: '$(Build.BuildId)'
  - name: imageFullName
    value: '$(imageName):$(imageTag)'

steps:
- checkout: self
  fetchDepth: 0
  persistCredentials: true 
  clean: true

- task: Bash@3
  displayName: Building and Pushing Image
  inputs:
    targetType: 'inline'
    ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
      script: 'docker buildx build --platform linux/amd64,linux/arm64 -t henda24/telegrambot:latest -t $(imageFullName) --push .'
    ${{ else }}:
      script: 'docker buildx build --platform linux/amd64,linux/arm64 -t $(imageFullName) .'

- task: Bash@3
  displayName: 'Update Kubernetes Manifest'
  inputs:
    targetType: 'inline'
    script: |
      echo "Updating deployment with image: $(imageFullName)"
      export IMAGE="$(imageFullName)"

      # Install yq if missing
      if ! command -v yq >/dev/null 2>&1; then
        echo "Installing yq..."
        sudo wget -q -O /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
        sudo chmod +x /usr/local/bin/yq
      fi
      yq eval -i '.spec.template.spec.containers[].image = strenv(IMAGE)' k8s/deployment.yaml

- task: Bash@3
  displayName: 'Commit and Push Manifest Changes'
  inputs:
    targetType: 'inline'
    script: |
      git config --global --add safe.directory "$(pwd)"
      git config --local user.name  "CI Bot"
      git config --local user.email "ci-bot@example.com"
      git config --local commit.gpgsign false
      git config --local tag.gpgsign false

      git fetch origin --prune
      default_branch="$(git remote show origin | sed -n '/HEAD branch/s/.*: //p')"
      [ -z "$default_branch" ] && default_branch=main

      git checkout -B "$default_branch"

      remote_sha="$(git rev-parse "origin/$default_branch" || echo "")"

      git pull --rebase origin "$default_branch"

      git add -A
      if ! git diff --cached --quiet; then
        git commit --no-gpg-sign -m "[CI] Actualizaciones autom√°ticas [skip ci]"
      fi

      # Push normal (si no hubo carreras)
      if git push origin "$default_branch"; then
        echo "Push OK"
        exit 0
      fi

      if [ -n "$remote_sha" ]; then
        git push --force-with-lease="$default_branch:$remote_sha" origin "$default_branch"
      else
        git push --force-with-lease origin "$default_branch"
      fi